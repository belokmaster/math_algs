package ceil_algs

import (
	"fmt"
	"time"
)

/*
	Решето Эратосфена - алгоритм нахождения всех простых чисел до некоторого целого числа
	SieveOfEratosthenes возвращает срез, содержащий все простые числа до n
	Сложность выполнения алгоритма: O(n*logn*logn), т.к.:
		1 - основной цикл проходит до n^1/2 для проверки нечетных чисел
		2 - цикл от 3 до n^1/2 для проверки составных чисел
	Алгоритм работает по принципу исключения составных чисел.
	Инвариант: После каждой итерации все составные числа, меньшие текущего простого числа, отмечены как составные.
*/

func SimpleSieveOfEratosthenes(n int) []int {
	// Если n меньше 2, возвращаем пустой срез
	if n < 2 {
		return []int{}
	}

	// Создаем массив булевых значений длиной n + 1, где каждый элемент соответствует числу от 0 до n
	isComposite := make([]bool, n+1)

	// Начинаем проверку с числа 2, так как все числа меньше него уже обработаны
	i := 2

	// Продолжаем проверять числа до тех пор, пока квадрат текущего числа не превышает n
	for i*i <= n {
		// Если текущее число еще не было помечено как составное
		if !isComposite[i] {
			// Помечаем все кратные этого числа начиная с квадрата как составные
			j := i * i
			for j <= n {
				isComposite[j] = true
				j += i // Переходим к следующему кратному
			}
		}
		i++ // Проверяем следующее число
	}

	// Собираем все простые числа в отдельный срез
	primes := []int{}         // Инициализируем пустой срез для хранения простых чисел
	for i := 2; i <= n; i++ { // Проходим по всем числам от 2 до n
		if !isComposite[i] { // Если число не помечено как составное, оно простое
			primes = append(primes, i) // Добавляем его в срез простых чисел
		}
	}

	// Возвращаем найденный список простых чисел
	return primes
}

// Функция для выполнения алгоритма "Решето Эратосфена"
func ExecuteSimpleSieveOfEratosthenes(n int) {
	start := time.Now()
	primes := SimpleSieveOfEratosthenes(n)
	duration := time.Since(start)

	fmt.Printf("1. Время выполнения: %v\n", duration)
	fmt.Printf("2. Количество простых чисел до %d: %d\n", n, len(primes))
	fmt.Printf("3. Простые числа до %d: %v\n", n, primes)
}
