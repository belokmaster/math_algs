package ceil_algs

import (
	"fmt"
	"time"
)

/*
	BinPower возводит число a (base) в степень n (exponent) методом быстрого возведения в степень.
	Сложность выполнения алгоритма: O(logn), потому что
	каждое деление на 2 сокращает показатель степени вдвое, поэтому количество итераций в цикле пропорционально logn
	Для четных чисел n:
			Любое четное число n можно записать как n == 2k => a^n == a^(2k) == (a^k)^2.
			таким образом, степень n сводится к числу k и возведению результата в квадрат.
			Пример для наглядности: 2^4 == (2^2)^2 == 4^2 == 16.
	Для нечетных чисел n:
			Любое нечетное число n можно записать как n == 2k + 1 => a * a^(2k).
			таким образом, степень n сводится к числу k и умножению результата на a.
			Пример для наглядности: 2^5 == (2^4) * 2 == 32.
	Мы делим показатель степени на 2, сокращая количество операций, необходимых для возведения в степень.
	Инвариант: После каждой итерации значение result умножается на текущую степень base, если exponent нечетный,
	и base всегда возводится в квадрат, а exponent делится на 2.
	Подробный пример из дебагера ниже.
*/

func BinPow(base, exponent int) int {
	result := 1
	for exponent > 0 {
		if exponent%2 == 1 { // Проверяем, является ли текущий показатель степени нечетным.
			result *= base // Если нечетный, умножаем текущий результат на основание.
		}
		base *= base  // Возводим основание в квадрат.
		exponent /= 2 // Делим показатель степени на 2
	}
	return result
}

// Пример функции для выполнения возведения числа в степень методом быстрого возведения в степень.
func ExecuteBinPow(base, exponent int) {
	start := time.Now()
	result := BinPow(base, exponent)
	duration := time.Since(start)

	fmt.Printf("1. Время выполнения: %v\n", duration)
	fmt.Printf("2. Результат возведения числа %d в %d-ую в степень: %d\n", base, exponent, result)
}

/*
	Пример 3^13. 13 = 1101 в двоичном.
	1) 1101. Младший бит 1. (нечетность) result := 1 * 3; base := 3 * 3 == 9 ; exponent := 13 / 2 = 6
	2) 110. Младший бит 0. base := 9 * 9 == 81 ; exponent := 6 / 2 = 3
	3) 11. Младший бит 1. result := 3 * 81 == 6561 ; exponent := 3 / 2 = 1
	4) 1. Младший бит 1. result := 6561 * 6561. exponent := 0. Завершаем.
	Итог: 1594323. Очень быстро и эффективно.
*/
